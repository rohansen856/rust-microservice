version: "3.8"

services:
  server-1:
    build:
      context: ./server-1
      dockerfile: Dockerfile
    container_name: rust_server_1
    env_file: ./server-1/.env # Load environment variables from server-1's .env file
    depends_on:
      - postgres
    ports:
      - "5050:5050" # Map port 5050 inside the container to 8081 on the host
    volumes:
      - ./server-1:/usr/src/app # Mount the server-1 directory for development
    command: [ "cargo", "run" ]
    profiles:
      - server

  server-2:
    build:
      context: ./server-2
      dockerfile: Dockerfile
    container_name: rust_server_2
    env_file: ./server-2/.env # Load environment variables from server-2's .env file
    depends_on:
      - postgres
    ports:
      - "8080:8080" # Map port 8080 inside the container to 8082 on the host
    volumes:
      - ./server-2:/usr/src/app # Mount the server-2 directory for development
    command: [ "cargo", "run" ]
    profiles:
      - server

  load-balancer:
    build:
      context: ./load-balancer
      dockerfile: Dockerfile
    container_name: rust_load_balancer
    env_file: ./load-balancer/.env # Load environment variables from load-balancer's .env file
    depends_on:
      - postgres
    ports:
      - "1234:1234" # Map port 1234 inside the container to 8082 on the host
    volumes:
      - ./load-balancer:/usr/src/app # Mount the load-balancer directory for development
    command: [ "cargo", "run" ]
    profiles:
      - server

  rate-limiter:
    build:
      context: ./rate-limiter
      dockerfile: Dockerfile
    container_name: rust_rate_limiter
    env_file: ./rate-limiter/.env # Load environment variables from rate-limiter's .env file
    depends_on:
      - redis
    ports:
      - "8888:8888" # Map port 8888 inside the container to 8082 on the host
    volumes:
      - ./rate-limiter:/usr/src/app # Mount the rate-limiter directory for development
    command: [ "cargo", "run" ]
    profiles:
      - server

  analytics:
    build:
      context: ./analytics
      dockerfile: Dockerfile
    container_name: rust_analytics
    env_file: ./analytics/.env # Load environment variables from analytics's .env file
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./analytics:/usr/src/app # Mount the analytics directory for development
    command: [ "cargo", "run" ]
    profiles:
      - server

  postgres:
    image: postgres:latest
    container_name: postgres-server
    restart: no
    environment:
      POSTGRES_USER: admin # Username for PostgreSQL
      POSTGRES_PASSWORD: securepassword # Password for the PostgreSQL user
      POSTGRES_DB: mydb # Default database to create
    ports:
      - "5432:5432" # Expose the PostgreSQL port
    volumes:
      - postgres-data:/var/lib/postgresql/data # Persistent storage for data
      - ./init-db:/docker-entrypoint-initdb.d/ # For initialization scripts (optional)

    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "admin" ]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - database

  redis:
    image: redis:latest
    container_name: redis-server
    restart: no
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      REDIS_REPLICATION_MODE: "master"
      REDIS_SAVE_INTERVAL: "900 1 300 10 60 10000"
      REDIS_LOG_LEVEL: "notice"
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--maxmemory",
        "256mb", # Set max memory limit for Redis
        "--maxmemory-policy",
        "allkeys-lru" # Eviction policy (LRU = Least Recently Used)
      ]
    profiles:
      - database

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    profiles:
      - database

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "test-topic:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    profiles:
      - database

volumes:
  postgres-data:
    driver: local # Persistent storage driver
  redis-data:
    driver: local # Persistent cache driver
